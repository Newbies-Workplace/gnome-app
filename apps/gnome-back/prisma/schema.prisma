generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Teams {
  id      String @id @unique @default(cuid())
  leader  String @unique   
  members TeamMembership[] @relation("team")
}

model TeamMembership {
  id      String @id @unique @default(cuid())
  team    Teams  @relation("team", fields: [teamId], references: [id])
  teamId  String
  user    User   @relation("member", fields: [userId], references: [id])
  userId  String
}

model User {
  id                String             @id @unique @default(uuid())
  googleId          String
  name              String
  email             String
  pictureUrl        String
  role              UserRole           @default(USER)
  gnomeInteractions GnomeInteraction[]
  sentRequest       Friendship[]       @relation("sender")
  receivedRequest   Friendship[]       @relation("receiver")
  memberships       TeamMembership[]   @relation("member")

}




model Gnome {
  id           String             @id @unique @default(uuid())
  name         String
  latitude     Float
  longitude    Float
  location     String
  creationDate DateTime
  description  String
  interactions GnomeInteraction[]
}

model GnomeInteraction {
  id              String   @id @unique @default(uuid())
  user            User     @relation(fields: [userId], references: [id])
  gnome           Gnome    @relation(fields: [gnomeId], references: [id])
  interactionDate DateTime
  userId          String
  gnomeId         String
}

model Friendship {
  id         String @id @unique @default(cuid())
  sender     User   @relation("sender", fields: [senderId], references: [id])
  receiver   User   @relation("receiver", fields: [receiverId], references: [id])
  status     Status @default(PENDING)
  senderId   String
  receiverId String
}

enum UserRole {
  ADMIN
  USER
  MODERATOR
}

enum Status {
  ACTIVE
  PENDING
}
